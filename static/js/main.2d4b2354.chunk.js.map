{"version":3,"sources":["firebaseConfig.js","DisplayContent.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Display","props","className","style","padding","height","fontWeight","marginBottom","type","name","placeholder","onChange","handleChange","value","username","student","fontSize","onClick","handleSubmit","display","flexWrap","justifyContent","items","map","item","filter","all","key","id","title","kids","x","removeItem","App","helpName","e","setState","target","preventDefault","itemsRef","database","ref","child","state","user","push","handleLogin","console","log","password","admins","temp","admin","login","itemId","remove","changeFilter","setFilter","on","snapshot","val","newState","oneKid","kid","newName","logins","newlogins","usersname","width","marginRight","marginLeft","this","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d4b2354.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBnB8dZjvXD4Ze8-X7LNspLZC6dIgV5Wzw\",\r\n    authDomain: \"school-aa57c.firebaseapp.com\",\r\n    databaseURL: \"https://school-aa57c.firebaseio.com\",\r\n    projectId: \"school-aa57c\",\r\n    storageBucket: \"school-aa57c.appspot.com\",\r\n    messagingSenderId: \"552355200282\",\r\n    appId: \"1:552355200282:web:116df200afcb10be5980a3\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import withFirebaseAuth from 'react-with-firebase-auth'\r\n//import * as firebase from 'firebase/app';\r\n//import * as firebase from 'firebase';\r\nimport 'firebase/auth';\r\nimport firebase from './firebaseConfig';\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\n\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className='container'>\r\n            <section className=\"add-item\" style={{ padding: \"30px 18px\", height: \"250px\" }}>\r\n                <form>\r\n                    <h2 style={{ fontWeight: \"bold\", marginBottom: \"15px\" }}>Add Students{\" & \"}Teachers</h2>\r\n                    <input type=\"text\" name=\"username\" placeholder=\"Name of Group\" onChange={props.handleChange} value={props.username} />\r\n                    <input type=\"text\" name=\"student\" placeholder=\"Students/Teachers Name\" onChange={props.handleChange} value={props.student} />\r\n                    <button style={{ fontSize: \"15px\" }} onClick={props.handleSubmit}>Add Student</button>\r\n                </form>\r\n            </section>\r\n            <section className='display-item'>\r\n                <div className=\"wrapper\" style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"left\" }}>\r\n                    {props.items.map((item) => {\r\n                        return (\r\n                            <ul>\r\n                                {\r\n                                    ((props.filter === item.name) || props.all) && [\r\n                                        <li key={item.id}>\r\n                                            {/* add 's class */}\r\n                                            <h3>{item.title}</h3>\r\n                                            {item.kids.map(x => {\r\n                                                return (\r\n                                                    <p >{x.student}\r\n                                                        {/* <div style={{ fontSize: \"10px\" }}>hey</div> */}\r\n                                                        <button onClick={() => props.removeItem(`/${item.title}/${x.id}`)}>Remove</button></p>\r\n                                                )\r\n                                            })}\r\n                                        </li>\r\n                                    ]\r\n                                }\r\n                            </ul>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import withFirebaseAuth from 'react-with-firebase-auth'\r\n//import * as firebase from 'firebase/app';\r\n//import * as firebase from 'firebase';\r\nimport 'firebase/auth';\r\nimport firebase from './firebaseConfig';\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Display from \"./DisplayContent.js\"\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      student: '',\r\n      username: '',\r\n      items: [],\r\n      filter: \"class\",\r\n      all: false,\r\n      user: '',\r\n      password: '',\r\n      admins: [],\r\n      login: false,\r\n    }\r\n  }\r\n\r\n  helpName = (name) => {\r\n    if (name === \"All Students\") {\r\n      return \"students\"\r\n    }\r\n    else if (name == \"All Teachers\") {\r\n      return \"teachers\"\r\n    }\r\n    else {\r\n      return \"class\"\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    const itemsRef = firebase.database().ref('Fac');\r\n    itemsRef.on('value', (snapshot) => {\r\n      let items = snapshot.val();\r\n      let newState = [];\r\n      for (let item in items) {\r\n        const itemsRef = firebase.database().ref('Fac').child(item);\r\n        itemsRef.on('value', (snapshot) => {\r\n          let kids = snapshot.val();\r\n          let oneKid = [];\r\n          for (let kid in kids) {\r\n            oneKid.push({\r\n              id: kid,\r\n              student: kids[kid].student,\r\n              user: kids[kid].user\r\n            });\r\n          }\r\n          let newName = this.helpName(item);\r\n          newState.push({ title: item, name: newName, kids: oneKid });\r\n        });\r\n      }\r\n      let newnewState = items;\r\n      console.log(newState);\r\n      this.setState({\r\n        items: newState\r\n      });\r\n    });\r\n\r\n    const loginsRef = firebase.database().ref('Login');\r\n    loginsRef.on('value', (snapshot) => {\r\n      let logins = snapshot.val();\r\n      let newlogins = [];\r\n      for (let item in logins) {\r\n        newlogins.push({ id: item, user: logins[item].usersname, password: logins[item].password });\r\n      }\r\n      console.log(newlogins);\r\n      this.setState({\r\n        admins: newlogins,\r\n      });\r\n    });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const itemsRef = firebase.database().ref('Fac').child(this.state.username);\r\n    const item = {\r\n      student: this.state.student,\r\n      user: this.state.username\r\n    }\r\n\r\n    itemsRef.push(item);\r\n    // //will also add student to total student list \r\n    // const allRef = firebase.database().ref('Fac').child('All Students');\r\n    // const all = {\r\n    //   student: this.state.student,\r\n    //   user: this.state.username\r\n    // }\r\n\r\n    // allRef.push(all);\r\n    this.setState({\r\n      student: '',\r\n      username: ''\r\n    });\r\n  }\r\n\r\n  handleLogin = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"here\")\r\n    console.log(this.state.user, this.state.password);\r\n    console.log(this.state.admins);\r\n    //this works to create a new admin\r\n    // const itemsRef = firebase.database().ref('Login');\r\n    // const item = {\r\n    //   usersname: this.state.user,\r\n    //   password: this.state.password,\r\n    // }\r\n    // itemsRef.push(item);\r\n    // this.setState({\r\n    //   user: '',\r\n    //   password: ''\r\n    // });\r\n    let temp = this.state.admins;\r\n    for (let admin in temp) {\r\n      if ((this.state.user === temp[admin].user) && (this.state.password === temp[admin].password)) {\r\n        this.setState({\r\n          login: true,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  removeItem = (itemId) => {\r\n    const itemRef = firebase.database().ref(`/Fac/${itemId}`);\r\n    itemRef.remove();\r\n  }\r\n\r\n  changeFilter = (setFilter) => {\r\n    if (setFilter === \"all\") {\r\n      this.setState({\r\n        all: true,\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        filter: setFilter,\r\n        all: false\r\n      });\r\n    }\r\n    return (false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='app' >\r\n        <header>\r\n          <div className='wrapper'>\r\n            <h1> \t&#128214; Thomas Jefferson Elementary School</h1>\r\n            <button style={{ fontWeight: \"bold\", fontSize: \"12px\", width: \"140px\", marginRight: \"20px\", marginLeft: \"50px\" }} type=\"button\" onClick={() => this.changeFilter(\"students\")}>Display Students</button>\r\n            <button style={{ fontWeight: \"bold\", fontSize: \"12px\", width: \"140px\", marginRight: \"20px\" }} type=\"button\" onClick={() => this.changeFilter(\"teachers\")}>Display Teachers</button>\r\n            <button style={{ fontWeight: \"bold\", fontSize: \"12px\", width: \"140px\", marginRight: \"20px\" }} type=\"button\" onClick={() => this.changeFilter(\"class\")}>Display Classes</button>\r\n            <button style={{ fontWeight: \"bold\", fontSize: \"12px\", width: \"140px\", marginRight: \"20px\" }} type=\"button\" onClick={() => this.changeFilter(\"all\")} >Display All</button>\r\n          </div>\r\n        </header>\r\n        <div>\r\n          {\r\n            this.state.login && [\r\n              <Display\r\n                username={this.state.username}\r\n                student={this.state.student}\r\n                items={this.state.items}\r\n                filter={this.state.filter} all={this.state.all}\r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                removeItem={this.removeItem}\r\n              />\r\n            ]\r\n          }\r\n        </div>\r\n        <div>\r\n          {\r\n            !this.state.login && [\r\n              <section className=\"add-item\" style={{ marginLeft: \"39vw\", marginTop: \"100px\", padding: \"30px 18px\", height: \"250px\" }}>\r\n                <form>\r\n                  <h2 style={{ fontWeight: \"bold\", marginBottom: \"15px\" }}>Welcome!</h2>\r\n                  <input type=\"text\" name=\"user\" placeholder=\"Username\" onChange={this.handleChange} value={this.state.user} />\r\n                  <input type=\"text\" name=\"password\" placeholder=\"Password\" onChange={this.handleChange} value={this.state.password} />\r\n                  <button style={{ fontSize: \"15px\" }} onClick={this.handleLogin}>Login</button>\r\n                </form>\r\n              </section>\r\n            ]\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// class App extends Component {\r\n\r\n//   // componentDidMount() {\r\n//   //   var userInfo = {\r\n//   //     name: \\,\r\n//   //   }; //user info\r\n//   //   firebaseApp.database().ref('student').push(userInfo);\r\n\r\n//   //   this.pnm.value = ''; // <- clear the input\r\n//   //   this.fno.value = '';\r\n//   // }\r\n\r\n//   componentDidMount() {\r\n//     console.log(\"hey\");\r\n//     const rootRef = firebase.database().ref().child('react');\r\n//     const speedRef = rootRef.child('users')\r\n//     speedRef.on('value', snap => {\r\n//       return (this.props.user);\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const {\r\n//       user,\r\n//       signOut,\r\n//       signInWithGoogle,\r\n//     } = this.props;\r\n//     //   var userInfo = {\r\n//     //     billing_name : this.pnm.value,\r\n//     //     billing_flat : this.fno.value,\r\n//     //   }; //user info\r\n//     // DbConfig.database().ref('billing').push(userInfo);\r\n\r\n//     // this.pnm.value = ''; // <- clear the input\r\n//     // this.fno.value = ''; \r\n\r\n\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//           {\r\n//             user\r\n//               ? <p>Hello, {user.displayName}</p>\r\n//               : <p>Please sign in.</p>\r\n//           }\r\n//           {\r\n//             user\r\n//               ? <button onClick={signOut}>Sign out</button>\r\n//               : <button onClick={signInWithGoogle}>Sign in with Google</button>\r\n//           }\r\n//         </header>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// const firebaseAppAuth = firebase.auth();\r\n\r\n// const providers = {\r\n//   googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n\r\n// };\r\n\r\n\r\n\r\n// export default withFirebaseAuth({\r\n//   providers,\r\n//   firebaseAppAuth,\r\n// })(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}